/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.50
 * Generated at: 2024-10-04 03:39:18 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class main_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1612850415545L));
    _jspx_dependants.put("jar:file:/C:/eGovFrame-4.0.0/workspace.edu/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/SpringMVC02/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!--  추가함! 자동완성 사용하기 -->\r\n");
      out.write("<!-- 자바언어를 표준어처럼 사용하겠다! 자바코드를 태그처럼 사용하기 -->\r\n");
      out.write(" \r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write(" <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css\">\r\n");
      out.write(" <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js\"></script>\r\n");
      out.write(" <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\t<div class=\"container\">\r\n");
      out.write("\t  <h2>AI School Board</h2>\r\n");
      out.write("\t  <div class=\"panel panel-default\">\r\n");
      out.write("\t    <div class=\"panel-heading\">Board List</div>\r\n");
      out.write("\t    <div class=\"panel-body\">\r\n");
      out.write("\t    \t<table class=\"table table-bordered table-hover\">\r\n");
      out.write("\t    \t\t<thead>    \t\t\r\n");
      out.write("\t\t    \t\t<tr class=\"info\">\r\n");
      out.write("\t\t    \t\t\t<td>번호</td>\r\n");
      out.write("\t\t    \t\t\t<td>제목</td>\r\n");
      out.write("\t\t    \t\t\t<td>작성자</td>\r\n");
      out.write("\t\t    \t\t\t<td>작성일</td>\r\n");
      out.write("\t\t    \t\t\t<td>조회수</td>\r\n");
      out.write("\t\t    \t\t</tr>\r\n");
      out.write("\t    \t\t</thead>\r\n");
      out.write("\t    \t\t\r\n");
      out.write("\t    \t\t<tbody id=\"view\" >\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t    \t\t    \t\t\t    \t\t\t\r\n");
      out.write("\t    \t\t</tbody>\r\n");
      out.write("\t    \t\t\t    \t\r\n");
      out.write("\t    \t</table>\r\n");
      out.write("\t    \t\r\n");
      out.write("\t    \t<!-- 페이지 이동 : a태그 -->\r\n");
      out.write("\t    \t<a href=\"boardInsertForm.do\">\r\n");
      out.write("\t    \t\t<button class=\"btn btn-warning\" >글쓰기</button>\r\n");
      out.write("\t    \t</a>  \r\n");
      out.write("\t    \t\r\n");
      out.write("\t    \t\r\n");
      out.write("\t    </div>\r\n");
      out.write("\t    \t<div class=\"panel-footer\">사물지능 - 박병관</div>\r\n");
      out.write("\t  \t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t\r\n");
      out.write("\t\tloadList();\r\n");
      out.write("\t\r\n");
      out.write("\t\tfunction loadList(){\r\n");
      out.write("\t\t\t// 서버와의 비동기통신\r\n");
      out.write("\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\turl : \"boardList.do\", // 요청 url\r\n");
      out.write("\t\t\t\ttype : \"get\", // 요청방식\r\n");
      out.write("\t\t\t\tdataType : \"json\", // 받아올 데이터 타입\r\n");
      out.write("\t\t\t\tsuccess : makeView, // 통신 성공 -> Call Back : 요청하고 나중에 실행되는 함수\r\n");
      out.write("\t\t\t\terror : function(){ alert(\"error...\"); } // 이름이 없는 함수 익명함수\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfunction makeView(data){\r\n");
      out.write("\t\t\tconsole.log(data);\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tlet listHtml = \"\";\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tfor(let i = 0; i < data.length; i++){\r\n");
      out.write("\t\t\t\t//console.log(data[i]);\r\n");
      out.write("\t\t\t\t//console.log(data[i].title);\r\n");
      out.write("\t\t\t\tlistHtml += \"<tr>\";\r\n");
      out.write("\t\t\t\tlistHtml += \"<td>\" + ( i + 1 ) + \"</td>\";\r\n");
      out.write("\t\t\t\tlistHtml += \"<td>\";\r\n");
      out.write("\t\t\t\tlistHtml += \"<a href='javascript:goContent(\"+data[i].idx+\")'>\";\r\n");
      out.write("\t\t\t\tlistHtml += data[i].title + \"</a></td>\";\r\n");
      out.write("\t\t\t\tlistHtml += \"<td>\" + data[i].writer + \"</td>\"\r\n");
      out.write("\t\t\t\tlistHtml += \"<td>\" + data[i].indate + \"</td>\"\r\n");
      out.write("\t\t\t\tlistHtml += \"<td>\" + data[i].count + \"</td>\"\r\n");
      out.write("\t\t\t\tlistHtml += \"</tr>\";\t\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tlistHtml += \"<tr id='c\"+data[i].idx+\"' style='display:none;'>\";\r\n");
      out.write("\t\t\t\t// 안보임 -> 제목을 클릭했을때 해당내용만 나오게 하기\r\n");
      out.write("\t\t\t\tlistHtml += \"<td>내용</td>\";\r\n");
      out.write("\t\t\t\tlistHtml += \"<td colspan='4'>\";\r\n");
      out.write("\t\t\t\tlistHtml += \"<textarea id='ta\"+data[i].idx+\"' readonly rows='7' class='form-control'></textarea>\";\r\n");
      out.write("\t\t\t\tlistHtml += \"</td>\";\r\n");
      out.write("\t\t\t\tlistHtml += \"</tr>\";\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t$(\"#view\").html(listHtml);\r\n");
      out.write("\t\t\t// view요소 선택하겠다\r\n");
      out.write("\t\t\t//.html : html로 인식\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfunction goContent(idx){\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tif($(\"#c\"+idx).css(\"display\") == \"none\"){\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\t\turl : \"boardContent.do\",\r\n");
      out.write("\t\t\t\t\ttype : \"get\",\r\n");
      out.write("\t\t\t\t\tdata : {\"idx\" : idx},\r\n");
      out.write("\t\t\t\t\t// 데이터 보냄 매개변수 안 idx\r\n");
      out.write("\t\t\t\t\tdataType : \"json\",\r\n");
      out.write("\t\t\t\t\tsuccess : function(data){ // 콜백함수 말고 바로 작동\r\n");
      out.write("\t\t\t\t\t\t// idx받아와서 특정게시물보내야함\r\n");
      out.write("\t\t\t\t\t\tconsole.log(data);\r\n");
      out.write("\t\t\t\t\t$(\"#ta\"+idx).val(data.content)\r\n");
      out.write("\t\t\t\t\t// input태그 함수 val\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\terror : function(){ alert(\"error...\"); }\t\t\t\t\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t$(\"#c\"+idx).css(\"display\", \"table-row\");\r\n");
      out.write("\t\t\t\t// display -> tr태그\t\r\n");
      out.write("\t\t\t}else{\r\n");
      out.write("\t\t\t\t$(\"#c\"+idx).css(\"display\", \"none\");\r\n");
      out.write("\t\t\t}\t\t\t\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\r\n");
      out.write("\t</script>\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
